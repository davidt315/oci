ARG CONTAINER_REGISTRY=docker.io
FROM $CONTAINER_REGISTRY/ubuntu:20.04 as build

# metadata
LABEL \
    org.opencontainers.image.source="https://github.com/polymathrobotics/oci" \
    org.opencontainers.image.licenses="Apache-2.0" \
    org.opencontainers.image.description="Grafana - the open observability platform in a container image."

SHELL ["/bin/bash", "-o", "pipefail", "-c"]
RUN apt-get update \
  && apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
  && mkdir -p /tmp/grafana \
  && dpkgArch="$(dpkg --print-architecture)" \
  && case "${dpkgArch##*-}" in \
    amd64) \
      GRAFANA_URL='https://dl.grafana.com/oss/release/grafana-8.5.0.linux-amd64.tar.gz' \
      GRAFANA_SHA256='ad5e858e2255d69da45f83f9571cf741c6867ed8ccede5ad42e90079119b98aa'
      ;; \
    arm64) \
      GRAFANA_URL='https://dl.grafana.com/oss/release/grafana-8.5.0.linux-arm64.tar.gz' \
      GRAFANA_SHA256='6e906e0902b88314cd8f5a49c11140398981a7643b268dc04632fc30667581ae' \
      ;; \
    armhf) \
      GRAFANA_URL='https://dl.grafana.com/oss/release/grafana-8.5.0.linux-armv7.tar.gz' \
      GRAFANA_SHA256='a9ca8e1581683be904067b049cecf119e97f085c0948b3db897bea73eac9c6c1' \
      ;; \
    *) echo "unsupported architecture"; exit 1 ;; \
    esac \
  && curl -fsSL -o /tmp/grafana.tar.gz ${GRAFANA_URL} \
  && echo "${GRAFANA_SHA256} /tmp/grafana.tar.gz" | sha256sum -c - \
  && tar xvf /tmp/grafana.tar.gz -C /tmp/grafana --strip-components 1

FROM $CONTAINER_REGISTRY/ubuntu:20.04

ARG GF_UID="472"
ARG GF_GID="0"

ENV PATH=/usr/share/grafana/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
    GF_PATHS_CONFIG="/etc/grafana/grafana.ini" \
    GF_PATHS_DATA="/var/lib/grafana" \
    GF_PATHS_HOME="/usr/share/grafana" \
    GF_PATHS_LOGS="/var/log/grafana" \
    GF_PATHS_PLUGINS="/var/lib/grafana/plugins" \
    GF_PATHS_PROVISIONING="/etc/grafana/provisioning"

WORKDIR $GF_PATHS_HOME

RUN apt-get update \
  && DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
    ca-certificates \
    curl \
    tzdata \
  && apt-get autoremove -y \
  && rm -rf /var/lib/apt/lists/*

COPY --from=build /tmp/grafana "$GF_PATHS_HOME"

# Group names won't have spaces in them
# hadolint ignore=SC2046
RUN if [ ! $(getent group "$GF_GID") ]; then \
      addgroup --system --gid $GF_GID grafana; \
    fi

SHELL ["/bin/bash", "-o", "pipefail", "-c"]
# hadolint ignore=SC2155
RUN export GF_GID_NAME=$(getent group $GF_GID | cut -d':' -f1) && \
    mkdir -p "$GF_PATHS_HOME/.aws" && \
    adduser --system --uid $GF_UID --ingroup "$GF_GID_NAME" grafana && \
    mkdir -p "$GF_PATHS_PROVISIONING/datasources" \
             "$GF_PATHS_PROVISIONING/dashboards" \
             "$GF_PATHS_PROVISIONING/notifiers" \
             "$GF_PATHS_PROVISIONING/plugins" \
             "$GF_PATHS_PROVISIONING/access-control" \
             "$GF_PATHS_LOGS" \
             "$GF_PATHS_PLUGINS" \
             "$GF_PATHS_DATA" && \
    cp "$GF_PATHS_HOME/conf/sample.ini" "$GF_PATHS_CONFIG" && \
    cp "$GF_PATHS_HOME/conf/ldap.toml" /etc/grafana/ldap.toml && \
    chown -R "grafana:$GF_GID_NAME" "$GF_PATHS_DATA" "$GF_PATHS_HOME/.aws" "$GF_PATHS_LOGS" "$GF_PATHS_PLUGINS" "$GF_PATHS_PROVISIONING" && \
    chmod -R 777 "$GF_PATHS_DATA" "$GF_PATHS_HOME/.aws" "$GF_PATHS_LOGS" "$GF_PATHS_PLUGINS" "$GF_PATHS_PROVISIONING"

COPY --chmod=755 ./run.sh /run.sh

EXPOSE 3000
USER "$GF_UID"
ENTRYPOINT [ "/run.sh" ]
