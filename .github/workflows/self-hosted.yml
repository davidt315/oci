name: self-hosted

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  # Job to run change detection
  changes:
    runs-on: [self-hosted, multi-arch]
    outputs:
      images: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            couchdb: 'couchdb/**'          
            python/3.9/focal: 'python/3.9/focal/**'
            python/3.9/slim-focal: 'python/3.9/slim-focal/**'
            python/3.9/jammy: 'python/3.9/jammy/**'
            python/3.9/slim-jammy: 'python/3.9/slim-jammy/**'
            python/3.10/focal: 'python/3.10/focal/**'
            python/3.10/slim-focal: 'python/3.10/slim-focal/**'
            python/3.10/jammy: 'python/3.10/jammy/**'
            python/3.10/slim-jammy: 'python/3.10/slim-jammy/**'

  # Job to build and test each of the modified images
  build:
    needs: changes
    strategy:
      matrix:
        # Parse JSON array containing names of all filters matching any of changed files
        # e.g. ['image1', 'image2'] if both image folders contains changes
        image: ${{ fromJSON(needs.changes.outputs.images) }}
    if: ${{ needs.changes.outputs.images != '[]' && needs.changes.outputs.images != '' }}
    runs-on: [self-hosted, multi-arch]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get build parameters
        shell: bash
        working-directory: ${{ matrix.image }}
        run: |
          echo "run-lint-stage=$($(git rev-parse --show-toplevel)/bin/run-lint-stage.sh)" >> $GITHUB_ENV
          echo "run-test-stage=$($(git rev-parse --show-toplevel)/bin/run-test-stage.sh)" >> $GITHUB_ENV
          echo "test-entrypoint=$($(git rev-parse --show-toplevel)/bin/test-entrypoint.sh)" >> $GITHUB_ENV
          cat $GITHUB_ENV

      - uses: polymathrobotics/container-build-publish-action@main
        with:
          workdir: ${{ matrix.image }}
          build-type: 'local'
          run-lint-stage: ${{ env.run-lint-stage }}
          run-test-stage: ${{ env.run-test-stage }}
          test-entrypoint: ${{ env.test-entrypoint }}
          dockerhub-username: ${{ secrets.CONTAINER_REGISTRY_USERNAME }}
          dockerhub-password: ${{ secrets.CONTAINER_DESCRIPTION_PASSWORD }}
